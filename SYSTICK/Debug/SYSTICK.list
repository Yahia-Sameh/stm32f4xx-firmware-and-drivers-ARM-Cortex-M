
SYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000414  0800041c  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000414  08000414  0000141c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000414  08000414  0000141c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000414  0800041c  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000418  08000418  00001418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800041c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800041c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000028d  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000184  00000000  00000000  000016d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005c  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ff4  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005ec  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003f08  00000000  00000000  00002f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006e2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000168  00000000  00000000  00006e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00006fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003fc 	.word	0x080003fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003fc 	.word	0x080003fc

080001d4 <SYSTICK_Enable>:
#include "STK_config.h"
#include "STK_private.h"
#include "STK_interface.h"

/* Private helper functions */
static void SYSTICK_Enable(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    MSYSTICK->CTRL |= (1 << SYSTICK_CTRL_ENABLE);
 80001d8:	4b05      	ldr	r3, [pc, #20]	@ (80001f0 <SYSTICK_Enable+0x1c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <SYSTICK_Enable+0x1c>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	e000e010 	.word	0xe000e010

080001f4 <SYSTICK_Disable>:

static void SYSTICK_Disable(void) {
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
    MSYSTICK->CTRL &= ~(1 << SYSTICK_CTRL_ENABLE);
 80001f8:	4b05      	ldr	r3, [pc, #20]	@ (8000210 <SYSTICK_Disable+0x1c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a04      	ldr	r2, [pc, #16]	@ (8000210 <SYSTICK_Disable+0x1c>)
 80001fe:	f023 0301 	bic.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e010 	.word	0xe000e010

08000214 <SYSTICK_WaitForCount>:

static void SYSTICK_WaitForCount(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
    while (!(MSYSTICK->CTRL & (1 << SYSTICK_CTRL_COUNTFLAG)));
 8000218:	bf00      	nop
 800021a:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <SYSTICK_WaitForCount+0x20>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000222:	2b00      	cmp	r3, #0
 8000224:	d0f9      	beq.n	800021a <SYSTICK_WaitForCount+0x6>
}
 8000226:	bf00      	nop
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e010 	.word	0xe000e010

08000238 <SYSTICK_Init>:

/* Public functions */
void SYSTICK_Init(void) {
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
    /* Configure clock source */
    if (SYSTICK_CLOCK_SOURCE == SYSTICK_CLKSOURCE_AHB) {
        MSYSTICK->CTRL |= (1 << SYSTICK_CTRL_CLKSOURCE);
    } else {
        MSYSTICK->CTRL &= ~(1 << SYSTICK_CTRL_CLKSOURCE);
 800023c:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <SYSTICK_Init+0x28>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a07      	ldr	r2, [pc, #28]	@ (8000260 <SYSTICK_Init+0x28>)
 8000242:	f023 0304 	bic.w	r3, r3, #4
 8000246:	6013      	str	r3, [r2, #0]

    /* Configure interrupt */
    if (SYSTICK_INTERRUPT == SYSTICK_INT_ENABLE) {
        MSYSTICK->CTRL |= (1 << SYSTICK_CTRL_TICKINT);
    } else {
        MSYSTICK->CTRL &= ~(1 << SYSTICK_CTRL_TICKINT);
 8000248:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <SYSTICK_Init+0x28>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a04      	ldr	r2, [pc, #16]	@ (8000260 <SYSTICK_Init+0x28>)
 800024e:	f023 0302 	bic.w	r3, r3, #2
 8000252:	6013      	str	r3, [r2, #0]
    }
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	e000e010 	.word	0xe000e010

08000264 <SYSTICK_DelayMs>:

void SYSTICK_DelayMs(uint32_t milliseconds) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    uint32_t clockFreq = (SYSTICK_CLOCK_SOURCE == SYSTICK_CLKSOURCE_AHB) ?
 800026c:	4b16      	ldr	r3, [pc, #88]	@ (80002c8 <SYSTICK_DelayMs+0x64>)
 800026e:	613b      	str	r3, [r7, #16]
                         SYSTEM_CLOCK_FREQ_HZ : (SYSTEM_CLOCK_FREQ_HZ / 8);

    uint32_t ticksPerMs = clockFreq / 1000;
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	4a16      	ldr	r2, [pc, #88]	@ (80002cc <SYSTICK_DelayMs+0x68>)
 8000274:	fba2 2303 	umull	r2, r3, r2, r3
 8000278:	099b      	lsrs	r3, r3, #6
 800027a:	60fb      	str	r3, [r7, #12]
    uint32_t totalTicks = milliseconds * ticksPerMs;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	68fa      	ldr	r2, [r7, #12]
 8000280:	fb02 f303 	mul.w	r3, r2, r3
 8000284:	617b      	str	r3, [r7, #20]

    while (totalTicks > 0) {
 8000286:	e017      	b.n	80002b8 <SYSTICK_DelayMs+0x54>
        uint32_t currentLoad = (totalTicks > 0x00FFFFFF) ? 0x00FFFFFF : totalTicks;
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800028e:	4293      	cmp	r3, r2
 8000290:	bf28      	it	cs
 8000292:	4613      	movcs	r3, r2
 8000294:	60bb      	str	r3, [r7, #8]

        MSYSTICK->LOAD = currentLoad - 1;
 8000296:	4a0e      	ldr	r2, [pc, #56]	@ (80002d0 <SYSTICK_DelayMs+0x6c>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	3b01      	subs	r3, #1
 800029c:	6053      	str	r3, [r2, #4]
        MSYSTICK->VAL = 0;
 800029e:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <SYSTICK_DelayMs+0x6c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
        SYSTICK_Enable();
 80002a4:	f7ff ff96 	bl	80001d4 <SYSTICK_Enable>
        SYSTICK_WaitForCount();
 80002a8:	f7ff ffb4 	bl	8000214 <SYSTICK_WaitForCount>
        SYSTICK_Disable();
 80002ac:	f7ff ffa2 	bl	80001f4 <SYSTICK_Disable>

        totalTicks -= currentLoad;
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	1ad3      	subs	r3, r2, r3
 80002b6:	617b      	str	r3, [r7, #20]
    while (totalTicks > 0) {
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1e4      	bne.n	8000288 <SYSTICK_DelayMs+0x24>
    }
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	3718      	adds	r7, #24
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	001e8480 	.word	0x001e8480
 80002cc:	10624dd3 	.word	0x10624dd3
 80002d0:	e000e010 	.word	0xe000e010

080002d4 <SYSTICK_DelayUs>:

void SYSTICK_DelayUs(uint32_t microseconds) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
    uint32_t clockFreq = (SYSTICK_CLOCK_SOURCE == SYSTICK_CLKSOURCE_AHB) ?
 80002dc:	4b16      	ldr	r3, [pc, #88]	@ (8000338 <SYSTICK_DelayUs+0x64>)
 80002de:	613b      	str	r3, [r7, #16]
                         SYSTEM_CLOCK_FREQ_HZ : (SYSTEM_CLOCK_FREQ_HZ / 8);

    uint32_t ticksPerUs = clockFreq / 1000000;
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	4a16      	ldr	r2, [pc, #88]	@ (800033c <SYSTICK_DelayUs+0x68>)
 80002e4:	fba2 2303 	umull	r2, r3, r2, r3
 80002e8:	0c9b      	lsrs	r3, r3, #18
 80002ea:	60fb      	str	r3, [r7, #12]
    uint32_t totalTicks = microseconds * ticksPerUs;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	fb02 f303 	mul.w	r3, r2, r3
 80002f4:	617b      	str	r3, [r7, #20]

    while (totalTicks > 0) {
 80002f6:	e017      	b.n	8000328 <SYSTICK_DelayUs+0x54>
        uint32_t currentLoad = (totalTicks > 0x00FFFFFF) ? 0x00FFFFFF : totalTicks;
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80002fe:	4293      	cmp	r3, r2
 8000300:	bf28      	it	cs
 8000302:	4613      	movcs	r3, r2
 8000304:	60bb      	str	r3, [r7, #8]

        MSYSTICK->LOAD = currentLoad - 1;
 8000306:	4a0e      	ldr	r2, [pc, #56]	@ (8000340 <SYSTICK_DelayUs+0x6c>)
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	3b01      	subs	r3, #1
 800030c:	6053      	str	r3, [r2, #4]
        MSYSTICK->VAL = 0;
 800030e:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <SYSTICK_DelayUs+0x6c>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
        SYSTICK_Enable();
 8000314:	f7ff ff5e 	bl	80001d4 <SYSTICK_Enable>
        SYSTICK_WaitForCount();
 8000318:	f7ff ff7c 	bl	8000214 <SYSTICK_WaitForCount>
        SYSTICK_Disable();
 800031c:	f7ff ff6a 	bl	80001f4 <SYSTICK_Disable>

        totalTicks -= currentLoad;
 8000320:	697a      	ldr	r2, [r7, #20]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	617b      	str	r3, [r7, #20]
    while (totalTicks > 0) {
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d1e4      	bne.n	80002f8 <SYSTICK_DelayUs+0x24>
    }
}
 800032e:	bf00      	nop
 8000330:	bf00      	nop
 8000332:	3718      	adds	r7, #24
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	001e8480 	.word	0x001e8480
 800033c:	431bde83 	.word	0x431bde83
 8000340:	e000e010 	.word	0xe000e010

08000344 <main>:
void SYSTICK_SetReloadValue(uint32_t value) {
    MSYSTICK->LOAD = value;
}


int main() {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    SYSTICK_Init();
 8000348:	f7ff ff76 	bl	8000238 <SYSTICK_Init>

    while(1) {
        SYSTICK_DelayMs(500);  // 500ms delay
 800034c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000350:	f7ff ff88 	bl	8000264 <SYSTICK_DelayMs>
        // Do something
        SYSTICK_DelayUs(100);  // 100μs delay
 8000354:	2064      	movs	r0, #100	@ 0x64
 8000356:	f7ff ffbd 	bl	80002d4 <SYSTICK_DelayUs>
        SYSTICK_DelayMs(500);  // 500ms delay
 800035a:	bf00      	nop
 800035c:	e7f6      	b.n	800034c <main+0x8>
	...

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	@ (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	@ (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	@ (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	@ (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	@ (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 f811 	bl	80003b4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000392:	f7ff ffd7 	bl	8000344 <main>

08000396 <LoopForever>:

LoopForever:
  b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <__libc_init_array>:
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	4d0d      	ldr	r5, [pc, #52]	@ (80003ec <__libc_init_array+0x38>)
 80003b8:	4c0d      	ldr	r4, [pc, #52]	@ (80003f0 <__libc_init_array+0x3c>)
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	2600      	movs	r6, #0
 80003c0:	42a6      	cmp	r6, r4
 80003c2:	d109      	bne.n	80003d8 <__libc_init_array+0x24>
 80003c4:	4d0b      	ldr	r5, [pc, #44]	@ (80003f4 <__libc_init_array+0x40>)
 80003c6:	4c0c      	ldr	r4, [pc, #48]	@ (80003f8 <__libc_init_array+0x44>)
 80003c8:	f000 f818 	bl	80003fc <_init>
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	2600      	movs	r6, #0
 80003d2:	42a6      	cmp	r6, r4
 80003d4:	d105      	bne.n	80003e2 <__libc_init_array+0x2e>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003dc:	4798      	blx	r3
 80003de:	3601      	adds	r6, #1
 80003e0:	e7ee      	b.n	80003c0 <__libc_init_array+0xc>
 80003e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e6:	4798      	blx	r3
 80003e8:	3601      	adds	r6, #1
 80003ea:	e7f2      	b.n	80003d2 <__libc_init_array+0x1e>
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000414 	.word	0x08000414
 80003f8:	08000418 	.word	0x08000418

080003fc <_init>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr

08000408 <_fini>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr
