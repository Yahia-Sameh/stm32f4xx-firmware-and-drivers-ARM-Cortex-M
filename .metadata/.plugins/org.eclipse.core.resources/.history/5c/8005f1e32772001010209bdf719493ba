/*
 * USART_private.h
 *
 *  Created on: Aug 5, 2025
 *      Author: cgame
 */

#ifndef USART_PRIVATE_H_
#define USART_PRIVATE_H_

#include <stdint.h>

#define PERIPH_BASE           0x40000000U
#define APB1PERIPH_BASE       PERIPH_BASE
#define APB2PERIPH_BASE       (PERIPH_BASE + 0x00010000U)
#define AHB1PERIPH_BASE       (PERIPH_BASE + 0x00020000U)

#define USART2_BASE           (APB1PERIPH_BASE + 0x4400U)
#define USART1_BASE           (APB2PERIPH_BASE + 0x1000U)
#define RCC_BASE              (AHB1PERIPH_BASE + 0x3800U)

#define GPIOA_BASE            (AHB1PERIPH_BASE + 0x0000U)

typedef struct {
    volatile uint32_t MODER;    // GPIO port mode register
    volatile uint32_t OTYPER;   // GPIO port output type register
    volatile uint32_t OSPEEDR;  // GPIO port output speed register
    volatile uint32_t PUPDR;    // GPIO port pull-up/pull-down register
    volatile uint32_t IDR;      // GPIO port input data register
    volatile uint32_t ODR;      // GPIO port output data register
    volatile uint32_t BSRR;     // GPIO port bit set/reset register
    volatile uint32_t LCKR;     // GPIO port configuration lock register
    volatile uint32_t AFR[2];   // GPIO alternate function registers
} GPIO_TypeDef;

typedef struct {
    volatile uint32_t CR1;      // Control register 1
    volatile uint32_t CR2;      // Control register 2
    volatile uint32_t CR3;      // Control register 3
    volatile uint32_t BRR;      // Baud rate register
    volatile uint32_t GTPR;     // Guard time and prescaler register
    volatile uint32_t RTOR;     // Receiver timeout register
    volatile uint32_t RQR;      // Request register
    volatile uint32_t ISR;      // Interrupt and status register
    volatile uint32_t ICR;      // Interrupt flag clear register
    volatile uint32_t RDR;      // Receive data register
    volatile uint32_t TDR;      // Transmit data register
} USART_TypeDef;

typedef struct {
    volatile uint32_t CR;       // Clock control register
    volatile uint32_t PLLCFGR;  // PLL configuration register
    volatile uint32_t CFGR;     // Clock configuration register
    volatile uint32_t CIR;      // Clock interrupt register
    volatile uint32_t AHB1RSTR; // AHB1 peripheral reset register
    volatile uint32_t AHB2RSTR; // AHB2 peripheral reset register
    volatile uint32_t AHB3RSTR; // AHB3 peripheral reset register
    volatile uint32_t RESERVED0;
    volatile uint32_t APB1RSTR; // APB1 peripheral reset register
    volatile uint32_t APB2RSTR; // APB2 peripheral reset register
    volatile uint32_t RESERVED1[2];
    volatile uint32_t AHB1ENR;  // AHB1 peripheral clock enable register
    volatile uint32_t AHB2ENR;  // AHB2 peripheral clock enable register
    volatile uint32_t AHB3ENR;  // AHB3 peripheral clock enable register
    volatile uint32_t RESERVED2;
    volatile uint32_t APB1ENR;  // APB1 peripheral clock enable register
    volatile uint32_t APB2ENR;  // APB2 peripheral clock enable register
    volatile uint32_t RESERVED3[2];
    volatile uint32_t AHB1LPENR;// AHB1 peripheral clock enable in low power mode register
    volatile uint32_t AHB2LPENR;// AHB2 peripheral clock enable in low power mode register
    volatile uint32_t AHB3LPENR;// AHB3 peripheral clock enable in low power mode register
    volatile uint32_t RESERVED4;
    volatile uint32_t APB1LPENR;// APB1 peripheral clock enable in low power mode register
    volatile uint32_t APB2LPENR;// APB2 peripheral clock enable in low power mode register
    volatile uint32_t RESERVED5[2];
    volatile uint32_t BDCR;      // Backup domain control register
    volatile uint32_t CSR;       // Clock control & status register
    volatile uint32_t RESERVED6[2];
    volatile uint32_t SSCGR;     // Spread spectrum clock generation register
    volatile uint32_t PLLI2SCFGR;// PLLI2S configuration register
} RCC_TypeDef;

#define RCC                 ((RCC_TypeDef *)RCC_BASE)
#define GPIOA               ((GPIO_TypeDef *)GPIOA_BASE)
#define USART1              ((USART_TypeDef *)USART1_BASE)
#define USART2              ((USART_TypeDef *)USART2_BASE)

// USART CR1 bits
#define USART_CR1_UE        (1 << 0)    // USART enable
#define USART_CR1_TE        (1 << 3)    // Transmitter enable
#define USART_CR1_RE        (1 << 2)    // Receiver enable

// USART ISR bits
#define USART_ISR_TXE       (1 << 7)    // Transmit data register empty
#define USART_ISR_RXNE      (1 << 5)    // Read data register not empty

// RCC AHB1ENR bits
#define RCC_AHB1ENR_GPIOAEN (1 << 0)    // GPIOA clock enable

// RCC APB1ENR bits
#define RCC_APB1ENR_USART2EN (1 << 17)  // USART2 clock enable

// RCC APB2ENR bits
#define RCC_APB2ENR_USART1EN (1 << 4)   // USART1 clock enable

// GPIO MODER bits
#define GPIO_MODER_AF       (2 << 0)    // Alternate function mode

// GPIO AFR bits
#define GPIO_AF7_USART1     (7 << 0)    // Alternate function 7 (USART1)
#define GPIO_AF7_USART2     (7 << 0)    // Alternate function 7 (USART2)

void USART1_Init(void);
void USART2_Init(void);
void USART1_SendChar(char c);
void USART2_SendChar(char c);
char USART1_ReceiveChar(void);
char USART2_ReceiveChar(void);
void USART1_SendString(const char *str);
void USART2_SendString(const char *str);

#endif /* USART_PRIVATE_H_ */
