#include "RCC_interface.h"
#include "RCC_private.h"
#include <stdint.h>

static uint8_t RCC_u8State = IDLE;

void RCC_vSetClkSts(uint8_t Copy_u8CLK, uint8_t Copy_u8Status)
{
  if (RCC_u8State == IDLE)
  {
    RCC_u8State = BUSY;

    if (Copy_u8CLK == HSI_CLK)
    {
      if (Copy_u8Status == CLK_ON)
      {
        SET_BIT(MRCC_t->CR, 0);  // Enable HSI
        while(READ_BIT(MRCC_t->CR, 1) == 0); // Wait for HSIRDY
      }
      else if (Copy_u8Status == CLK_OFF)
      {
        CLR_BIT(MRCC_t->CR, 0);  // Disable HSI
        while(READ_BIT(MRCC_t->CR, 1) == 1); // Wait until off
      }
    }
    else if (Copy_u8CLK == HSE_CLK)
    {
      if (Copy_u8Status == CLK_ON)
      {
        SET_BIT(MRCC_t->CR, 18); // Enable HSE bypass if needed
        SET_BIT(MRCC_t->CR, 16); // Enable HSE
        while(READ_BIT(MRCC_t->CR, 17) == 0); // Wait for HSERDY
      }
      else if (Copy_u8Status == CLK_OFF)
      {
        CLR_BIT(MRCC_t->CR, 16); // Disable HSE
        while(READ_BIT(MRCC_t->CR, 17) == 1); // Wait until off
      }
    }
    else if (Copy_u8CLK == PLL_CLK)
    {
      if (Copy_u8Status == CLK_ON)
      {
        SET_BIT(MRCC_t->CR, 24); // Enable PLL
        while(READ_BIT(MRCC_t->CR, 25) == 0); // Wait for PLLRDY
      }
      else if (Copy_u8Status == CLK_OFF)
      {
        CLR_BIT(MRCC_t->CR, 24); // Disable PLL
        while(READ_BIT(MRCC_t->CR, 25) == 1); // Wait until off
      }
    }

    RCC_u8State = IDLE;
  }
}

void RCC_vSetSysClk(uint8_t Copy_u8CLK)
{
  if (RCC_u8State == IDLE)
  {
    RCC_u8State = BUSY;
    MRCC_t->CFGR &= ~(SYS_CLK_MASK);
    MRCC_t->CFGR |= Copy_u8CLK;
    RCC_u8State = IDLE;
  }
}

void RCC_vPLLConfig(uint8_t Copy_u8PLLSrc, uint8_t Copy_u8PLLMul)
{
  if (RCC_u8State == IDLE)
  {
    RCC_u8State = BUSY;

    // Set PLL source
    if (Copy_u8PLLSrc == PLL_HSI)
      CLR_BIT(MRCC_t->CFGR, 16);
    else if (Copy_u8PLLSrc == PLL_HSE || Copy_u8PLLSrc == PLL_HSE_DIV_2)
    {
      SET_BIT(MRCC_t->CFGR, 16);
      if (Copy_u8PLLSrc == PLL_HSE_DIV_2)
        SET_BIT(MRCC_t->CFGR, 17);
      else
        CLR_BIT(MRCC_t->CFGR, 17);
    }

    // Set PLL multiplier
    MRCC_t->CFGR &= ~(PLL_CONFIG_MASK << 18);
    MRCC_t->CFGR |= (Copy_u8PLLMul << 18);

    RCC_u8State = IDLE;
  }
}

void RCC_vAHBConfig(uint8_t Copy_u8AHPDiv)
{
  if (RCC_u8State == IDLE)
  {
    RCC_u8State = BUSY;
    MRCC_t->CFGR &= ~(0xF << 4);
    MRCC_t->CFGR |= (Copy_u8AHPDiv << 4);
    RCC_u8State = IDLE;
  }
}

void RCC_vAPB1Config(uint8_t Copy_u8APB1Div)
{
  if (RCC_u8State == IDLE)
  {
    RCC_u8State = BUSY;
    MRCC_t->CFGR &= ~(0x7 << 8);
    MRCC_t->CFGR |= (Copy_u8APB1Div << 8);
    RCC_u8State = IDLE;
  }
}

void RCC_vAPB2Config(uint8_t Copy_u8APB2Div)
{
  if (RCC_u8State == IDLE)
  {
    RCC_u8State = BUSY;
    MRCC_t->CFGR &= ~(0x7 << 11);
    MRCC_t->CFGR |= (Copy_u8APB2Div << 11);
    RCC_u8State = IDLE;
  }
}

void RCC_vAHPPerSts(uint8_t Copy_u8AHPPer, uint8_t Copy_u8Status)
{
  if (RCC_u8State == IDLE)
  {
    RCC_u8State = BUSY;
    if (Copy_u8Status == PER_ON)
      SET_BIT(MRCC_t->AHPENR, Copy_u8AHPPer);
    else if (Copy_u8Status == PER_OFF)
      CLR_BIT(MRCC_t->AHPENR, Copy_u8AHPPer);
    RCC_u8State = IDLE;
  }
}

void RCC_vABPPerSts(uint8_t Copy_u8Bus, uint8_t Copy_u8AHPPer, uint8_t Copy_u8Status)
{
  if (RCC_u8State == IDLE)
  {
    RCC_u8State = BUSY;
    if (Copy_u8Bus == APB1)
    {
      if (Copy_u8Status == PER_ON)
        SET_BIT(MRCC_t->APB1ENR, Copy_u8AHPPer);
      else if (Copy_u8Status == PER_OFF)
        CLR_BIT(MRCC_t->APB1ENR, Copy_u8AHPPer);
    }
    else if (Copy_u8Bus == APB2)
    {
      if (Copy_u8Status == PER_ON)
        SET_BIT(MRCC_t->APB2ENR, Copy_u8AHPPer);
      else if (Copy_u8Status == PER_OFF)
        CLR_BIT(MRCC_t->APB2ENR, Copy_u8AHPPer);
    }
    RCC_u8State = IDLE;
  }
}
