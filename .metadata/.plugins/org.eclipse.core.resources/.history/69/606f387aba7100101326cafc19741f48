/* SYSTIC_program.c */
#include "STK_config.h"
#include "STK_private.h"
#include "STK_interface.h"

/* Private helper functions */
static void SYSTICK_Enable(void) {
    MSYSTICK->CTRL |= (1 << SYSTICK_CTRL_ENABLE);
}

static void SYSTICK_Disable(void) {
    MSYSTICK->CTRL &= ~(1 << SYSTICK_CTRL_ENABLE);
}

static void SYSTICK_WaitForCount(void) {
    while (!(MSYSTICK->CTRL & (1 << SYSTICK_CTRL_COUNTFLAG)));
}

/* Public functions */
void SYSTICK_Init(void) {
    /* Configure clock source */
    if (SYSTICK_CLOCK_SOURCE == SYSTICK_CLKSOURCE_AHB) {
        MSYSTICK->CTRL |= (1 << SYSTICK_CTRL_CLKSOURCE);
    } else {
        MSYSTICK->CTRL &= ~(1 << SYSTICK_CTRL_CLKSOURCE);
    }

    /* Configure interrupt */
    if (SYSTICK_INTERRUPT == SYSTICK_INT_ENABLE) {
        MSYSTICK->CTRL |= (1 << SYSTICK_CTRL_TICKINT);
    } else {
        MSYSTICK->CTRL &= ~(1 << SYSTICK_CTRL_TICKINT);
    }
}

void SYSTICK_DelayMs(uint32_t milliseconds) {
    uint32_t clockFreq = (SYSTICK_CLOCK_SOURCE == SYSTICK_CLKSOURCE_AHB) ?
                         SYSTEM_CLOCK_FREQ_HZ : (SYSTEM_CLOCK_FREQ_HZ / 8);

    uint32_t ticksPerMs = clockFreq / 1000;
    uint32_t totalTicks = milliseconds * ticksPerMs;

    while (totalTicks > 0) {
        uint32_t currentLoad = (totalTicks > 0x00FFFFFF) ? 0x00FFFFFF : totalTicks;

        MSYSTICK->LOAD = currentLoad - 1;
        MSYSTICK->VAL = 0;
        SYSTICK_Enable();
        SYSTICK_WaitForCount();
        SYSTICK_Disable();

        totalTicks -= currentLoad;
    }
}

void SYSTICK_DelayUs(uint32_t microseconds) {
    uint32_t clockFreq = (SYSTICK_CLOCK_SOURCE == SYSTICK_CLKSOURCE_AHB) ?
                         SYSTEM_CLOCK_FREQ_HZ : (SYSTEM_CLOCK_FREQ_HZ / 8);

    uint32_t ticksPerUs = clockFreq / 1000000;
    uint32_t totalTicks = microseconds * ticksPerUs;

    while (totalTicks > 0) {
        uint32_t currentLoad = (totalTicks > 0x00FFFFFF) ? 0x00FFFFFF : totalTicks;

        MSYSTICK->LOAD = currentLoad - 1;
        MSYSTICK->VAL = 0;
        SYSTICK_Enable();
        SYSTICK_WaitForCount();
        SYSTICK_Disable();

        totalTicks -= currentLoad;
    }
}

uint32_t SYSTICK_GetRemainingTicks(void) {
    return MSYSTICK->VAL;
}

void SYSTICK_SetReloadValue(uint32_t value) {
    MSYSTICK->LOAD = value;
}
