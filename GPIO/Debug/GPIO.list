
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800055c  0800055c  0000155c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000574  08000574  0000157c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000574  08000574  0000157c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000574  0800057c  0000157c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000574  08000574  00001574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000578  08000578  00001578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000157c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800057c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800057c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000061b  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000019b  00000000  00000000  00001bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00001d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007b  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000103a  00000000  00000000  00001e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006de  00000000  00000000  00002ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004261  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000780c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000025c  00000000  00000000  00007850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00007aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000544 	.word	0x08000544

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000544 	.word	0x08000544

080001d4 <GPIO_EnableClock>:
/* AHB1ENR register for clock control (assuming RCC base address is 0x40023800) */
#define RCC_AHB1ENR    (*((volatile uint32_t *)0x40023830))

/*===========================================================================*/
void GPIO_EnableClock(GPIO_Port port)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
    if (port <= GPIO_PORTH) {
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b07      	cmp	r3, #7
 80001e2:	d809      	bhi.n	80001f8 <GPIO_EnableClock+0x24>
        RCC_AHB1ENR |= (1 << port);
 80001e4:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <GPIO_EnableClock+0x30>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	79fa      	ldrb	r2, [r7, #7]
 80001ea:	2101      	movs	r1, #1
 80001ec:	fa01 f202 	lsl.w	r2, r1, r2
 80001f0:	4611      	mov	r1, r2
 80001f2:	4a04      	ldr	r2, [pc, #16]	@ (8000204 <GPIO_EnableClock+0x30>)
 80001f4:	430b      	orrs	r3, r1
 80001f6:	6013      	str	r3, [r2, #0]
    }
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	40023830 	.word	0x40023830

08000208 <GPIO_ConfigurePinMode>:
    }
}

/*===========================================================================*/
void GPIO_ConfigurePinMode(GPIO_Port port, GPIO_Pin pin, GPIO_Mode mode)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	460b      	mov	r3, r1
 8000214:	71bb      	strb	r3, [r7, #6]
 8000216:	4613      	mov	r3, r2
 8000218:	717b      	strb	r3, [r7, #5]
    GPIO_PORT[port]->MODER &= ~(MODE_MASK << (pin * 2));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4a13      	ldr	r2, [pc, #76]	@ (800026c <GPIO_ConfigurePinMode+0x64>)
 800021e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	79bb      	ldrb	r3, [r7, #6]
 8000226:	005b      	lsls	r3, r3, #1
 8000228:	2103      	movs	r1, #3
 800022a:	fa01 f303 	lsl.w	r3, r1, r3
 800022e:	43db      	mvns	r3, r3
 8000230:	4618      	mov	r0, r3
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	490d      	ldr	r1, [pc, #52]	@ (800026c <GPIO_ConfigurePinMode+0x64>)
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	4002      	ands	r2, r0
 800023c:	601a      	str	r2, [r3, #0]
    GPIO_PORT[port]->MODER |= (mode << (pin * 2));
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	4a0a      	ldr	r2, [pc, #40]	@ (800026c <GPIO_ConfigurePinMode+0x64>)
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	7979      	ldrb	r1, [r7, #5]
 800024a:	79bb      	ldrb	r3, [r7, #6]
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
 8000252:	4618      	mov	r0, r3
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	4905      	ldr	r1, [pc, #20]	@ (800026c <GPIO_ConfigurePinMode+0x64>)
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	4302      	orrs	r2, r0
 800025e:	601a      	str	r2, [r3, #0]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	0800055c 	.word	0x0800055c

08000270 <GPIO_ConfigurePull>:

/*===========================================================================*/
void GPIO_ConfigurePull(GPIO_Port port, GPIO_Pin pin, GPIO_Pull pull)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
 800027a:	460b      	mov	r3, r1
 800027c:	71bb      	strb	r3, [r7, #6]
 800027e:	4613      	mov	r3, r2
 8000280:	717b      	strb	r3, [r7, #5]
    GPIO_PORT[port]->PUPDR &= ~(PULL_MASK << (pin * 2));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4a13      	ldr	r2, [pc, #76]	@ (80002d4 <GPIO_ConfigurePull+0x64>)
 8000286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028a:	68da      	ldr	r2, [r3, #12]
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	2103      	movs	r1, #3
 8000292:	fa01 f303 	lsl.w	r3, r1, r3
 8000296:	43db      	mvns	r3, r3
 8000298:	4618      	mov	r0, r3
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	490d      	ldr	r1, [pc, #52]	@ (80002d4 <GPIO_ConfigurePull+0x64>)
 800029e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a2:	4002      	ands	r2, r0
 80002a4:	60da      	str	r2, [r3, #12]
    GPIO_PORT[port]->PUPDR |= (pull << (pin * 2));
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <GPIO_ConfigurePull+0x64>)
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	68da      	ldr	r2, [r3, #12]
 80002b0:	7979      	ldrb	r1, [r7, #5]
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4905      	ldr	r1, [pc, #20]	@ (80002d4 <GPIO_ConfigurePull+0x64>)
 80002c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c4:	4302      	orrs	r2, r0
 80002c6:	60da      	str	r2, [r3, #12]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	0800055c 	.word	0x0800055c

080002d8 <GPIO_ConfigureOutputType>:

/*===========================================================================*/
void GPIO_ConfigureOutputType(GPIO_Port port, GPIO_Pin pin, GPIO_OType otype)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
 80002e2:	460b      	mov	r3, r1
 80002e4:	71bb      	strb	r3, [r7, #6]
 80002e6:	4613      	mov	r3, r2
 80002e8:	717b      	strb	r3, [r7, #5]
    GPIO_PORT[port]->OTYPER &= ~(OTYPE_MASK << pin);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4a12      	ldr	r2, [pc, #72]	@ (8000338 <GPIO_ConfigureOutputType+0x60>)
 80002ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	2101      	movs	r1, #1
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	43db      	mvns	r3, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	490d      	ldr	r1, [pc, #52]	@ (8000338 <GPIO_ConfigureOutputType+0x60>)
 8000304:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000308:	4002      	ands	r2, r0
 800030a:	605a      	str	r2, [r3, #4]
    GPIO_PORT[port]->OTYPER |= (otype << pin);
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4a0a      	ldr	r2, [pc, #40]	@ (8000338 <GPIO_ConfigureOutputType+0x60>)
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	7979      	ldrb	r1, [r7, #5]
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	4618      	mov	r0, r3
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4905      	ldr	r1, [pc, #20]	@ (8000338 <GPIO_ConfigureOutputType+0x60>)
 8000324:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000328:	4302      	orrs	r2, r0
 800032a:	605a      	str	r2, [r3, #4]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	0800055c 	.word	0x0800055c

0800033c <GPIO_ConfigureOutputSpeed>:

/*===========================================================================*/
void GPIO_ConfigureOutputSpeed(GPIO_Port port, GPIO_Pin pin, GPIO_Speed speed)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	460b      	mov	r3, r1
 8000348:	71bb      	strb	r3, [r7, #6]
 800034a:	4613      	mov	r3, r2
 800034c:	717b      	strb	r3, [r7, #5]
    GPIO_PORT[port]->OSPEEDR &= ~(SPEED_MASK << (pin * 2));
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4a13      	ldr	r2, [pc, #76]	@ (80003a0 <GPIO_ConfigureOutputSpeed+0x64>)
 8000352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000356:	689a      	ldr	r2, [r3, #8]
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	2103      	movs	r1, #3
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	43db      	mvns	r3, r3
 8000364:	4618      	mov	r0, r3
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	490d      	ldr	r1, [pc, #52]	@ (80003a0 <GPIO_ConfigureOutputSpeed+0x64>)
 800036a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800036e:	4002      	ands	r2, r0
 8000370:	609a      	str	r2, [r3, #8]
    GPIO_PORT[port]->OSPEEDR |= (speed << (pin * 2));
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	4a0a      	ldr	r2, [pc, #40]	@ (80003a0 <GPIO_ConfigureOutputSpeed+0x64>)
 8000376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	7979      	ldrb	r1, [r7, #5]
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	fa01 f303 	lsl.w	r3, r1, r3
 8000386:	4618      	mov	r0, r3
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	4905      	ldr	r1, [pc, #20]	@ (80003a0 <GPIO_ConfigureOutputSpeed+0x64>)
 800038c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000390:	4302      	orrs	r2, r0
 8000392:	609a      	str	r2, [r3, #8]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	0800055c 	.word	0x0800055c

080003a4 <GPIO_Pin_Write>:
    GPIO_PORT[port]->AFR[afr_reg] |= (alternate << afr_pos);
}

/*===========================================================================*/
void GPIO_Pin_Write(GPIO_Port port, GPIO_Pin pin, GPIO_State state)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
 80003ae:	460b      	mov	r3, r1
 80003b0:	71bb      	strb	r3, [r7, #6]
 80003b2:	4613      	mov	r3, r2
 80003b4:	717b      	strb	r3, [r7, #5]
    if (state == GPIO_HIGH)
 80003b6:	797b      	ldrb	r3, [r7, #5]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d10a      	bne.n	80003d2 <GPIO_Pin_Write+0x2e>
        GPIO_PORT[port]->BSRR = (1 << pin);
 80003bc:	79bb      	ldrb	r3, [r7, #6]
 80003be:	2201      	movs	r2, #1
 80003c0:	fa02 f103 	lsl.w	r1, r2, r3
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	4a0b      	ldr	r2, [pc, #44]	@ (80003f4 <GPIO_Pin_Write+0x50>)
 80003c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003cc:	460a      	mov	r2, r1
 80003ce:	619a      	str	r2, [r3, #24]
    else
        GPIO_PORT[port]->BSRR = (1 << (pin + 16));
}
 80003d0:	e00a      	b.n	80003e8 <GPIO_Pin_Write+0x44>
        GPIO_PORT[port]->BSRR = (1 << (pin + 16));
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	3310      	adds	r3, #16
 80003d6:	2201      	movs	r2, #1
 80003d8:	fa02 f103 	lsl.w	r1, r2, r3
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <GPIO_Pin_Write+0x50>)
 80003e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e4:	460a      	mov	r2, r1
 80003e6:	619a      	str	r2, [r3, #24]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	0800055c 	.word	0x0800055c

080003f8 <GPIO_Pin_Toggle>:
    return (GPIO_PORT[port]->IDR & (1 << pin)) ? GPIO_HIGH : GPIO_LOW;
}

/*===========================================================================*/
void GPIO_Pin_Toggle(GPIO_Port port, GPIO_Pin pin)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	460a      	mov	r2, r1
 8000402:	71fb      	strb	r3, [r7, #7]
 8000404:	4613      	mov	r3, r2
 8000406:	71bb      	strb	r3, [r7, #6]
    GPIO_PORT[port]->ODR ^= (1 << pin);
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	4a0a      	ldr	r2, [pc, #40]	@ (8000434 <GPIO_Pin_Toggle+0x3c>)
 800040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	2101      	movs	r1, #1
 8000416:	fa01 f303 	lsl.w	r3, r1, r3
 800041a:	4618      	mov	r0, r3
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4905      	ldr	r1, [pc, #20]	@ (8000434 <GPIO_Pin_Toggle+0x3c>)
 8000420:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000424:	4042      	eors	r2, r0
 8000426:	615a      	str	r2, [r3, #20]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	0800055c 	.word	0x0800055c

08000438 <GPIO_InitDefaultOutput>:
    return GPIO_PORT[port]->IDR;
}

/*===========================================================================*/
void GPIO_InitDefaultOutput(GPIO_Port port, GPIO_Pin pin)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	460a      	mov	r2, r1
 8000442:	71fb      	strb	r3, [r7, #7]
 8000444:	4613      	mov	r3, r2
 8000446:	71bb      	strb	r3, [r7, #6]
    GPIO_EnableClock(port);
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fec2 	bl	80001d4 <GPIO_EnableClock>
    GPIO_ConfigurePinMode(port, pin, GPIO_MODE_OUTPUT);
 8000450:	79b9      	ldrb	r1, [r7, #6]
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2201      	movs	r2, #1
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff fed6 	bl	8000208 <GPIO_ConfigurePinMode>
    GPIO_ConfigureOutputType(port, pin, GPIO_OTYPE_PP);
 800045c:	79b9      	ldrb	r1, [r7, #6]
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2200      	movs	r2, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff38 	bl	80002d8 <GPIO_ConfigureOutputType>
    GPIO_ConfigureOutputSpeed(port, pin, GPIO_SPEED_MEDIUM);
 8000468:	79b9      	ldrb	r1, [r7, #6]
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2201      	movs	r2, #1
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff64 	bl	800033c <GPIO_ConfigureOutputSpeed>
    GPIO_ConfigurePull(port, pin, GPIO_PULL_NONE);
 8000474:	79b9      	ldrb	r1, [r7, #6]
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2200      	movs	r2, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff fef8 	bl	8000270 <GPIO_ConfigurePull>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <main>:

int main()
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
    // Initialize PA5 as a default output (LED)
    GPIO_InitDefaultOutput(GPIO_PORTA, GPIO_PIN5);
 800048c:	2105      	movs	r1, #5
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ffd2 	bl	8000438 <GPIO_InitDefaultOutput>

    // Turn on the LED
    GPIO_Pin_Write(GPIO_PORTA, GPIO_PIN5, GPIO_HIGH);
 8000494:	2201      	movs	r2, #1
 8000496:	2105      	movs	r1, #5
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff ff83 	bl	80003a4 <GPIO_Pin_Write>

    while(1) {
        // Toggle the LED
        GPIO_Pin_Toggle(GPIO_PORTA, GPIO_PIN5);
 800049e:	2105      	movs	r1, #5
 80004a0:	2000      	movs	r0, #0
 80004a2:	f7ff ffa9 	bl	80003f8 <GPIO_Pin_Toggle>
 80004a6:	e7fa      	b.n	800049e <main+0x16>

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	@ (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	@ (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	@ (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	@ (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80004d6:	f000 f811 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80004da:	f7ff ffd5 	bl	8000488 <main>

080004de <LoopForever>:

LoopForever:
  b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004ec:	0800057c 	.word	0x0800057c
  ldr r2, =_sbss
 80004f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004f4:	2000001c 	.word	0x2000001c

080004f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC_IRQHandler>
	...

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	@ (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	@ (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	@ (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	08000574 	.word	0x08000574
 8000538:	08000574 	.word	0x08000574
 800053c:	08000574 	.word	0x08000574
 8000540:	08000578 	.word	0x08000578

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
